{"ast":null,"code":"import _classCallCheck from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/leisu/ANDROID_DEV/ApothiCare-Web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/leisu/ANDROID_DEV/ApothiCare-Web/src/TestResponsiveGrid.js\";\nimport React from \"react\";\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\nimport _ from \"lodash\";\nvar ResponsiveReactGridLayout = WidthProvider(Responsive);\n/**\n * This layout demonstrates how to use a grid with a dynamic number of elements.\n */\n\nvar TestResponsiveGrid =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TestResponsiveGrid, _React$PureComponent);\n\n  function TestResponsiveGrid(props) {\n    var _this;\n\n    _classCallCheck(this, TestResponsiveGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestResponsiveGrid).call(this, props));\n    _this.state = {\n      items: [0, 1, 2, 3, 4].map(function (i, key, list) {\n        return {\n          i: i.toString(),\n          x: i * 2,\n          y: 0,\n          w: 2,\n          h: 2,\n          add: i === (list.length - 1).toString()\n        };\n      }),\n      newCounter: 0\n    };\n    _this.onAddItem = _this.onAddItem.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBreakpointChange = _this.onBreakpointChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TestResponsiveGrid, [{\n    key: \"createElement\",\n    value: function createElement(el) {\n      var removeStyle = {\n        position: \"absolute\",\n        right: \"2px\",\n        top: 0,\n        cursor: \"pointer\"\n      };\n      var i = el.add ? \"+\" : el.i;\n      return React.createElement(\"div\", {\n        key: i,\n        \"data-grid\": el,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, el.add ? React.createElement(\"span\", {\n        className: \"add text\",\n        onClick: this.onAddItem,\n        title: \"You can add an item by clicking here, too.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Add +\") : React.createElement(\"span\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, i), React.createElement(\"span\", {\n        className: \"remove\",\n        style: removeStyle,\n        onClick: this.onRemoveItem.bind(this, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"x\"));\n    }\n  }, {\n    key: \"onAddItem\",\n    value: function onAddItem() {\n      /*eslint no-console: 0*/\n      console.log(\"adding\", \"n\" + this.state.newCounter);\n      this.setState({\n        // Add a new item. It must have a unique key!\n        items: this.state.items.concat({\n          i: \"n\" + this.state.newCounter,\n          x: this.state.items.length * 2 % (this.state.cols || 12),\n          y: Infinity,\n          // puts it at the bottom\n          w: 2,\n          h: 2\n        }),\n        // Increment the counter to ensure key is always unique.\n        newCounter: this.state.newCounter + 1\n      });\n    } // We're using the cols coming back from this to calculate where to add new items.\n\n  }, {\n    key: \"onBreakpointChange\",\n    value: function onBreakpointChange(breakpoint, cols) {\n      this.setState({\n        breakpoint: breakpoint,\n        cols: cols\n      });\n    }\n  }, {\n    key: \"onLayoutChange\",\n    value: function onLayoutChange(layout) {\n      this.props.onLayoutChange(layout);\n      this.setState({\n        layout: layout\n      });\n    }\n  }, {\n    key: \"onRemoveItem\",\n    value: function onRemoveItem(i) {\n      console.log(\"removing\", i);\n      this.setState({\n        items: _.reject(this.state.items, {\n          i: i\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onAddItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Add Item\"), React.createElement(ResponsiveReactGridLayout, Object.assign({\n        onLayoutChange: this.onLayoutChange,\n        onBreakpointChange: this.onBreakpointChange\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), _.map(this.state.items, function (el) {\n        return _this2.createElement(el);\n      })));\n    }\n  }]);\n\n  return TestResponsiveGrid;\n}(React.PureComponent);\n\nTestResponsiveGrid.defaultProps = {\n  className: \"layout\",\n  cols: {\n    lg: 12,\n    md: 10,\n    sm: 6,\n    xs: 4,\n    xxs: 2\n  },\n  rowHeight: 100\n};\nexport { TestResponsiveGrid as default };","map":{"version":3,"sources":["/home/leisu/ANDROID_DEV/ApothiCare-Web/src/TestResponsiveGrid.js"],"names":["React","WidthProvider","Responsive","_","ResponsiveReactGridLayout","TestResponsiveGrid","props","state","items","map","i","key","list","toString","x","y","w","h","add","length","newCounter","onAddItem","bind","onBreakpointChange","el","removeStyle","position","right","top","cursor","onRemoveItem","console","log","setState","concat","cols","Infinity","breakpoint","layout","onLayoutChange","reject","createElement","PureComponent","defaultProps","className","lg","md","sm","xs","xxs","rowHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\nimport _ from \"lodash\";\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\n/**\n * This layout demonstrates how to use a grid with a dynamic number of elements.\n */\nexport default class TestResponsiveGrid extends React.PureComponent {\n    static defaultProps = {\n        className: \"layout\",\n        cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n        rowHeight: 100\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: [0, 1, 2, 3, 4].map(function(i, key, list) {\n                return {\n                    i: i.toString(),\n                    x: i * 2,\n                    y: 0,\n                    w: 2,\n                    h: 2,\n                    add: i === (list.length - 1).toString()\n                };\n            }),\n            newCounter: 0\n        };\n\n        this.onAddItem = this.onAddItem.bind(this);\n        this.onBreakpointChange = this.onBreakpointChange.bind(this);\n    }\n\n    createElement(el) {\n        const removeStyle = {\n            position: \"absolute\",\n            right: \"2px\",\n            top: 0,\n            cursor: \"pointer\"\n        };\n        const i = el.add ? \"+\" : el.i;\n        return (\n            <div key={i} data-grid={el}>\n                {el.add ? (\n                    <span\n                        className=\"add text\"\n                        onClick={this.onAddItem}\n                        title=\"You can add an item by clicking here, too.\"\n                    >\n            Add +\n          </span>\n                ) : (\n                    <span className=\"text\">{i}</span>\n                )}\n                <span\n                    className=\"remove\"\n                    style={removeStyle}\n                    onClick={this.onRemoveItem.bind(this, i)}\n                >\n          x\n        </span>\n            </div>\n        );\n    }\n\n    onAddItem() {\n        /*eslint no-console: 0*/\n        console.log(\"adding\", \"n\" + this.state.newCounter);\n        this.setState({\n            // Add a new item. It must have a unique key!\n            items: this.state.items.concat({\n                i: \"n\" + this.state.newCounter,\n                x: (this.state.items.length * 2) % (this.state.cols || 12),\n                y: Infinity, // puts it at the bottom\n                w: 2,\n                h: 2\n            }),\n            // Increment the counter to ensure key is always unique.\n            newCounter: this.state.newCounter + 1\n        });\n    }\n\n    // We're using the cols coming back from this to calculate where to add new items.\n    onBreakpointChange(breakpoint, cols) {\n        this.setState({\n            breakpoint: breakpoint,\n            cols: cols\n        });\n    }\n\n    onLayoutChange(layout) {\n        this.props.onLayoutChange(layout);\n        this.setState({ layout: layout });\n    }\n\n    onRemoveItem(i) {\n        console.log(\"removing\", i);\n        this.setState({ items: _.reject(this.state.items, { i: i }) });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onAddItem}>Add Item</button>\n                <ResponsiveReactGridLayout\n                    onLayoutChange={this.onLayoutChange}\n                    onBreakpointChange={this.onBreakpointChange}\n                    {...this.props}\n                >\n                    {_.map(this.state.items, el => this.createElement(el))}\n                </ResponsiveReactGridLayout>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}